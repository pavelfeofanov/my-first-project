#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include "lodepng.h"

int i, j;

char* load_picture(const char* filename, int* width, int* height) {
    unsigned char* image = NULL;
    int error = lodepng_decode32_file(&image, width, height, filename);
    if (error) {
        printf("error %u: %s\n", error, lodepng_error_text(error));
    }
    return (char*)image;
}

void make_picture(const char* filename, const unsigned char* image, unsigned width, unsigned height) {
    long unsigned int pngsize;
    unsigned char* png;
    int error = lodepng_encode32(&png, &pngsize, image, width, height);
    lodepng_save_file(png, pngsize, filename);
    if (error) printf("error %u: %s\n", error, lodepng_error_text(error));
    free(png);
}

void processing(unsigned char *ar, int h, int w) {
    for (i = 2; i < h - 1; i++) {
        for (j = 2; j < w - 1; j++) {
            if (ar[w * i + j] < 65)
                ar[w * i + j] = 0;
            if (ar[w * i + j] > 187)
                ar[w * i + j] = 255;
        }
    }
}

void Gauss(unsigned char *ar, unsigned char *pix, int h, int w) {
    for (i = 2; i < h - 1; i++) {
        for (j = 2; j < w - 1; j++) {
            pix[w * i + j] = 0.12 * ar[w * i + j] + 0.12 * ar[w * (i + 1) + j] + 0.12 * ar[w * (i - 1) + j];
            pix[w * i + j] = pix[w * i + j] + 0.12 * ar[w * i + (j + 1)] + 0.12 * ar[w * i + (j - 1)];
            pix[w * i + j] = pix[w * i + j] + 0.09 * ar[w * (i + 1) + (j + 1)] + 0.09 * ar[w * (i + 1) + (j - 1)];
            pix[w * i + j] = pix[w * i + j] + 0.09 * ar[w * (i - 1) + (j + 1)] + 0.09 * ar[w * (i - 1) + (j - 1)];
        }
    }
}

void paint(unsigned char *dmat, unsigned char *mpicture, int h, int w) {
    for (i = 1; i < w * h; i++) {
        mpicture[i * 4] = 100 + 0.8 * dmat[i] + 0.2 * dmat[i - 1];
        mpicture[i * 4 + 1] = 50 + dmat[i];
        mpicture[i * 4 + 2] = 150 + 0.5 * dmat[i];
        mpicture[i * 4 + 3] = 255;
    }
}

int main() {
    const char *filename = "test1.png";
    int w, h;
    int k = 0;
    char *skull = load_picture(filename, &w, &h);
    unsigned char *skull1 = (unsigned char *)malloc(h * w * sizeof(unsigned char));
    unsigned char *skull2 = (unsigned char *)malloc(h * w * sizeof(unsigned char));
    unsigned char *skull3 = (unsigned char *)malloc(h * w * 4 * sizeof(unsigned char));
    for (i = 0; i < h * w * 4; i = i + 4) {
        skull1[k] = 0.335 * skull[i] + 0.610 * skull[i + 1] + 0.200 * skull[i + 2];
        k++;
    }
    processing(skull1, h, w);
    Gauss(skull1, skull2, h, w);
    paint(skull2, skull3, h, w);
    const char *image2 = "test2.png";
    make_picture(image2, skull3, w, h);
    free(skull1);
    free(skull2);
    free(skull3);
    free(skull);
    return 0;
}
